Preguntas programación:
##¿Qué permite hacer la herencia en Java?
{
~Crear instancias de una clase
~Definir métodos que no pueden ser sobrescritos
=Reutilizar y extender funcionalidades de una clase base
~Encapsular datos de un objeto
}
##Cómo se define una clase abstracta en Java y qué propósito tiene?
{
=Con la palabra clave abstract; su propósito es ser utilizada como una clase base para ser extendida por otras clases
~Con la palabra clave interface; su propósito es implementar múltiples interfaces
~Con la palabra clave final; su propósito es ser una clase base para la creación de instancias
~Con la palabra clave static; su propósito es definir métodos accesibles sin instancia
}
##¿Qué es un método getter?
{
~Un método que modifica el valor de un atributo
~Un método que elimina un atributo
=Un método que obtiene el valor de un atributo
~Un método que crea un nuevo objeto
}               
##En el siguiente código, ¿qué método se invoca cuando se ejecuta el main?:
public class Vehiculo {
    public void conducir() {
        System.out.println("Conduciendo vehículo");
    }
}

public class Coche extends Vehiculo {
    @Override
    public void conducir() {
        System.out.println("Conduciendo coche");
    }

    public void acelerar() {
        System.out.println("Acelerando coche");
    }
}

public class Main {
    public static void main(String[] args) {
        Vehiculo v = new Coche();
        v.conducir();
    }
}
El metodo es:
{
~Conduciendo vehículo
=Conduciendo coche
~Acelerando coche
~Error de compilación
}
##El siguiente código muestra que una clase derivada puede acceder al valor de un atributo privado de la clase base si la clase base proporciona un método getter público para ese atributo:{t}

public class Padre {
    private String mensaje = "Hola desde la clase Padre";

    public String getMensaje() {
        return mensaje;
    }
}


public class Hija extends Padre {
    public void mostrarMensaje() {
        System.out.println(getMensaje());
    }
}


public class Main {
    public static void main(String[] args) {
        Hija h = new Hija();
        h.mostrarMensaje();
    }
}
6.	Verdadero o Falso:
En Java, el concepto de encapsulación se logra mediante el uso de modificadores de acceso como private, protected y public.

A) Verdadero
B) Falso
Respuesta: A
7.	Verdadero o Falso:
En Java, un atributo declarado como private es accesible desde cualquier otra clase que esté en el mismo paquete.
A) Verdadero
B) Falso
Respuesta: B
8.	Completa el siguiente enunciado con la palabra correcta:
En Java, los atributos que se declaran con el modificador de acceso __________ solo son accesibles dentro de la misma clase en la que están definidos.
A) public
B) protected
C) private
D) static
Respuesta: C
  9. Completa el siguiente enunciado con la palabra correcta:
En Java, una __________ es una plantilla que define los atributos y métodos que los objetos creados a partir de ella tendrán, pero no se puede instanciar directamente si es __________.

A) interfaz / abstracta
B) clase / final
C) clase / abstracta
D) objeto / estática
Respuesta: C








10. Examina el siguiente código Java y señala cuál es el error:
public class Coche {
    private String color;

    public void setColor(String color) {
        this.color = color;
    }

    public String getColor() {
        return color;
    }
}

public class Main {
    public static void main(String[] args) {
        Coche c = new Coche();
        c.setColor("Rojo");
        System.out.println(c.getColor());
        c.setColor(123);
    }
}
A) El método setColor no puede ser static.
B) El método setColor no puede aceptar un tipo int.
C) c.getColor debe ser c.getColor().
D) El atributo color debería ser public.

 Respuesta: B
